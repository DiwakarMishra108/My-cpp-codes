#include<iostream>
using namespace std;
class Node{
    public:
      int data;
      Node* next;
      Node(int d){
        data= d;
        next=NULL;
      }
      ~Node(){
        int value=this->data;
        if(this->next!=NULL){
          delete next;
          next=NULL;
        }
        cout<<"memory is free for node with value"<<" "<<value<<endl;;
      }
};
void insertNode(Node* &tail,int element,int d){
  if(tail==NULL){
    // empty list
    Node* nulllist=new Node(d);
    tail=nulllist;
    nulllist->next = nulllist;
  }
  else{
    // assuming element is present in the list
    Node* curr= tail;
    while(curr->data!=element){
      curr=curr->next;
    }
    // element found curr representing element wala node
    Node* temp =new Node(d);
    temp->next=curr->next;
    curr->next=temp;
  }
}
void print(Node* &tail){
  Node* temp = tail;
  if(tail==NULL){
    cout<<"list is empty"<<endl;
    return;
  }
  do{
    cout<<tail->data<<" ";
    tail=tail->next;
  }while(tail!=temp);
  cout<<endl;
}
void deletenode(Node* &tail,int val){
  // empty list
  if(tail==NULL){
    cout<<"list is empty, please check again"<<endl;
    return;
  }
  else{
    // non empty
    //  assuming that value is present in the linkedlist
    Node* prev = tail;
    Node* curr= prev->next;
    while(curr->data!= val){
      prev = curr;
      curr=curr->next;
    }
    prev->next = curr->next;
    // 1 node linkedlist
    if(curr==prev){
      tail=NULL;
    }
    // >=2 node linkedlist
    else if(tail==curr){
      tail=prev;
    }
    curr->next=NULL;
    delete curr;
  }
}
int main(){
    Node* tail = NULL;
    insertNode(tail,5,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    // insertNode(tail,5,4);
    // print(tail);
    // insertNode(tail,4,1);
    // print(tail);
    // insertNode(tail,1,10);
    // print(tail);
    //  insertNode(tail,3,9);
    // print(tail);
    deletenode(tail,3);
    print(tail);
    // deletenode(tail,10);
    // print(tail);
  return 0;  
}
