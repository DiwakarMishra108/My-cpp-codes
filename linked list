#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    // constructor
    Node(int a){
        data = a;
        next = NULL;
    }
    // destructor
    ~Node(){
        int value = this->data;
        if(this->next!=NULL){
            delete next;
            this->next = NULL;
        }
        cout<<"memory is free for node with data"<<" "<<value<<endl;
    }
};
// reverse linked list
void reverselinkedlist(Node* &head){
        if(head==NULL||head->next==NULL){
           head;
            return ;
        }
        Node* prev = NULL;
        Node* curr= head;
        Node* forword = NULL;
        while(curr->next!=NULL){
            forword=curr->next;
            curr->next=prev;
            prev=curr;
            curr= forword;
        }
        head=prev;
}
void inserthead(Node* &head,int d){
    // new node create
    Node* temp=new Node(d);
    temp-> next= head;
    head=temp;
}
void insertattail(Node* &tail,int d){
    Node* temp= new Node(d);
    tail->next = temp;
    tail = temp;
}
void insertatposition(Node* &tail,Node* &head,int position,int d){
    // indert at position 1
    if(position==1){
        inserthead(head,d);
        return;
    }
    Node* temp=head;
    int cnt=1;
    while(cnt<position-1){
        temp = temp->next;
        cnt++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertattail(tail,d);
        return;
    }
    // creating a new node for insertion
    Node* nodetoinsert= new Node(d);
    nodetoinsert->next=temp->next;
    temp->next=nodetoinsert;
    
}
void deletenode(Node* &head,int position){
    // delettinng first or start node
    if(position==1){
       Node* temp = head;
       head=head->next;
    //    memory free start node
       temp->next=NULL;
       delete temp;
    }
    else{
        // deletting any middle node or last node
        Node* curr= head;
        Node* prev= NULL;
        int cnt =1;
        while(cnt<=position){
          prev = curr;
          curr= curr->next;
          cnt++;
        }
        prev->next=curr->next;
        curr->next= NULL;
        delete curr;
    }
}
void print(Node* &head){
    Node* temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // created a new node
    Node* node1= new Node(10);
    // cout<<node1->data<<endl;
// head pointed to node1
    Node* head = node1;
    Node* tail= node1;
    print(head);
    inserthead(head,12);
    print(head);
    inserthead(head,15);
     print(head);
    inserthead(head,16);
     print(head);
     insertattail(tail,9);
     print(head);
    insertatposition(tail,head,3,14);
    print(head);
    insertatposition(tail,head,1,17);
    print(head);
    insertatposition(tail,head,8,8);
    print(head);
    reverselinkedlist(head);
    print(head);
    return 0;
}
